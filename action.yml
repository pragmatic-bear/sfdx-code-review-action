name: 'Pull Request SFDX Code Review'
description: 'Uses Salesforce Code Analyzer to create a Pull Request Review including inline Comments'
inputs:
  source_path:
    description: 'Path to the package folder containing source to be analysed. Git Diff will be performend in this folder and only changed files will be considered.'
    required: true
    default: '"***.cls" "***.trigger" "***.js" "***.html" "***.page" "***.cmp" "***.component" "***.apex" "***.ts"'
  github_token:
    description: 'Pass in the GITHUB_TOKEN to facilitate API calls to GitHub'
    required: true
  fail_threshold:
    description: 'Single Issue with this severity will cause the pipeline to fail (can be used instad of request changes)'
    required: false
    default: '0'
  reject_threshold:
    description: 'Single Issue with this severity will cause the review to request changes'
    required: false
    default: '0'
  approve_threshold:
    description: 'If all Issues are less severe than this the review will give approval'
    required: false
    default: '99'
  severity_threshold:
    description: 'Any issue less severe than this configuration will be completely ignored'
    required: false
    default: '3'
  max_comments:
    description: 'Maximum number of feedback comments to post as part of the review. Anything over 39 will be posted separately in 5s intervals.'
    required: false
    default: '39'
  category:
    description: 'From Analyzer; One or more categories of rules to run. Specify multiple values as a comma-separated list.'
    required: false
  engine:
    description: 'From Analyzer (default: pmd, eslint, cpd); not including Graph Engine. Specifies one or more engines to run. Submit multiple values as a comma-separated list. Specify the location of eslintrc config to customize eslint engine'
    required: false
    default: 'pmd,eslint,cpd'
  eslintconfig:
    description: 'From Analyzer;  Specifies the location of eslintrc config to customize eslint engine.'
    required: false
  pmdconfig:
    description: 'From Analyzer;  Specifies the location of PMD rule reference XML file to customize rule selection.'
    required: false
  tsconfig:
    description: 'From Analyzer;  Location of tsconfig.json file used by eslint-typescript engine.'
    required: false
  dfa_setting:
    description: 'Include Salesforce Graph Engine analysis. Options: "dfa" or "dfa-only". Leave blank to run only standard Analyzer.'
    required: false
  projectdir:
    description: 'From Analyzer, Applies to DFA only; Provides the relative or absolute root project directory used to set the context for Graph Engine analysis. Project directory must be a path, not a glob. Specify multiple values as a comma-separated list. Defaults to ./'
    required: false
    default: './'
  rule_thread_count:
    description: 'From Analyzer, Applies to DFA only; Specifies number of rule evaluation threads, or how many entrypoints can be evaluated concurrently. Inherits value from SFGE_RULE_THREAD_COUNT env-var, if set. Default is 4.'
    required: false
    default: '4'
  rule_thread_timeout:
    description: 'From Analyzer, Applies to DFA only; Specifies time limit for evaluating a single entrypoint in milliseconds. Inherits from SFGE_RULE_THREAD_TIMEOUT env-var if set. Default is 900,000 ms, or 15 minutes.'
    required: false
    default: '900000'
branding:
  icon: 'check'
  color: 'blue'

runs:
  using: 'composite'
  steps: 
    - name: Clone Repository (Latest)
      uses: actions/checkout@v3
      with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref }}

    - name: Fetch PR head and base
      shell: bash
      run: |
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}

    - name: Get GitDiff from GitHub PR API
      id: fetch_diff
      shell: bash
      run: |
        curl --request GET \
        --header 'authorization: Bearer ${{ inputs.github_token }}' \
        --header 'content-type: application/json' \
        --header 'Accept: application/vnd.github.v3.diff' \
        --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }} \
        > diff.txt

    - name: Do git diff to limit SFDX Analyzer
      shell: bash
      id: getdiff
      run: echo "::set-output name=difflist::$(git diff --name-only --diff-filter=MCRA $(git merge-base --fork-point origin/${{ github.base_ref }} origin/${{ github.head_ref }})..origin/${{ github.head_ref }} ${{ inputs.source_path }} | paste -sd "," -)"
    
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'npm'

    - name: Install Salesforce CLI
      shell: bash
      run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

    - name: 'Install Code Scanner'
      shell: bash
      run: sfdx plugins:install @salesforce/sfdx-scanner

    - name: 'Run Code Scanner'
      if: ${{ inputs.dfa_setting != 'dfa-only' }}
      shell: bash
      run: sfdx scanner:run --target "${{ steps.getdiff.outputs.difflist }}" --category "${{ inputs.category }}" --engine "${{ inputs.engine }}" --eslintconfig "${{ inputs.eslintconfig }}" --pmdconfig "${{ inputs.pmdconfig }}" --tsconfig "${{ inputs.tsconfig }}" --format csv --normalize-severity  > report.csv
    
    - name: 'Run Graph Engine'
      if: ${{ inputs.dfa_setting != '' }}
      shell: bash
      run: sfdx scanner:run:dfa --target "${{ steps.getdiff.outputs.difflist }}" --projectdir "${{ inputs.projectdir }}" --rule-thread-count "${{ inputs.rule_thread_count }}" --rule-thread-timeout "${{ inputs.rule_thread_timeout }}" --format csv --normalize-severity  > dfa-report.csv

    - name: 'Convert report to json'
      if: ${{ inputs.dfa_setting != 'dfa-only' }}
      shell: bash
      run: cat report.csv | python -c 'import csv, json, sys; print(json.dumps([dict(r) for r in csv.DictReader(sys.stdin)]))' > report.json
    
    - name: 'Convert Grapgh Engine report to json'
      if: ${{ inputs.dfa_setting != '' }}
      shell: bash
      run: cat dfa-report.csv | python -c 'import csv, json, sys; print(json.dumps([dict(r) for r in csv.DictReader(sys.stdin)]))' > dfa-report.json

    - name: 'Transform report to review comments'
      if: ${{ inputs.dfa_setting != 'dfa-only' }}
      shell: bash
      run: |
          echo "`jq -c 'map({path: (.File | split("${{ github.event.repository.name }}/")[2]), position: .Line, severity: .["Normalized Severity"], body: (.Description + " (" + .Engine + " - " + .Rule + " - " + "Severity: " + .["Normalized Severity"] + ")")})' report.json`" > comments.json
    
    - name: 'Transform Graph Engine report to review comments'
      if: ${{ inputs.dfa_setting != '' }}
      shell: bash
      run: |
          echo "`jq -c 'map({path: (."Source File" | split("${{ github.event.repository.name }}/")[2]), position: ."Source Line", severity: .["Normalized Severity"], body: ("Source Type: " + ."Source Type" + ", Source Method: " + ."Source Method" + ", Sink File: " + (."Sink File" | split("${{ github.event.repository.name }}/")[2]) + ": " + ."Sink Line" + " ### " + .Description + " (" + .Engine + " - " + .Rule + " - " + "Severity: " + ."Normalized Severity" + ")")})' dfa-report.json`" > dfa-comments.json

    - name: 'Empty Comments Array'
      if: ${{ inputs.dfa_setting == 'dfa-only' }}
      shell: bash
      run: |
          echo "[]" > comments.json
    
    - name: 'Empty Graph Engine Comments Array'
      if: ${{ inputs.dfa_setting == '' }}
      shell: bash
      run: |
          echo "[]" > dfa-comments.json

    - name: 'Create PR Review'
      shell: bash
      run: node ${{ github.action_path }}/scripts/node/createReview.js
      env:
          GITHUB_TOKEN: ${{ inputs.github_token }}
          FAIL_THRESHOLD: ${{ inputs.fail_threshold }}
          SEVERITY_THRESHOLD: ${{ inputs.severity_threshold }}
          REJECT_THRESHOLD: ${{ inputs.reject_threshold }}
          APPROVE_THRESHOLD: ${{ inputs.approve_threshold }} 
          MAX_COMMENTS: ${{ inputs.max_comments }}
      